# -*- coding: utf-8 -*-
"""mail_forwarding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12LuQ3WwPQXYV7TVWqdXwYROSrFCEtVv9
"""

pip install --upgrade pip setuptools wheel

pip install imapclient email smtplib

import imaplib
import smtplib
import email
from email.mime.text import MIMEText

IMAP_SERVER = "imap.gmail.com"
SMTP_SERVER = "smtp.gmail.com"
EMAIL = "guardianinbox2025@gmail.com"
PASSWORD = "12435567676"
FORWARD_TO = "sania27joe@gmail.com"

def get_unread_emails():
    """Fetch unread emails."""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, PASSWORD)
    mail.select("inbox")

    status, messages = mail.search(None, "UNSEEN")
    email_ids = messages[0].split()

    for e_id in email_ids:
        status, msg_data = mail.fetch(e_id, "(RFC822)")
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                forward_email(msg)

    mail.logout()

def forward_email(msg):
    """Forward an email via SMTP."""
    smtp = smtplib.SMTP(SMTP_SERVER, 587)
    smtp.starttls()
    smtp.login(EMAIL, PASSWORD)

    subject = "FWD: " + (msg["Subject"] if msg["Subject"] else "(No Subject)")

    # Extract email body (handle plain text & multipart emails)
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            if part.get_content_type() == "text/plain":
                body = part.get_payload(decode=True).decode(errors="ignore")
                break
    else:
        body = msg.get_payload(decode=True).decode(errors="ignore")

    msg_forward = MIMEText(body)
    msg_forward["From"] = EMAIL
    msg_forward["To"] = FORWARD_TO
    msg_forward["Subject"] = subject

    smtp.sendmail(EMAIL, FORWARD_TO, msg_forward.as_string())
    smtp.quit()


if __name__ == "__main__":
    get_unread_emails()

import imaplib
import smtplib
import email
import time
import re
import csv
import os
from email.header import decode_header
from email.mime.text import MIMEText

# Email Credentials
EMAIL = "radha.nadar11@gmail.com"
PASSWORD = "vqxq uovl sjkx dzeu"
IMAP_SERVER = "imap.gmail.com"
SMTP_SERVER = "smtp.gmail.com"
FORWARD_TO = "sania27joe@gmail.com"

# Load PhishTank Database
PHISHTANK_CSV = "/content/verified_online.csv"
phishing_urls = set()

def load_phishtank_data():
    """Load PhishTank phishing URLs into a set."""
    global phishing_urls
    if os.path.exists(PHISHTANK_CSV):
        with open(PHISHTANK_CSV, "r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row["verified"].lower() == "yes":
                    phishing_urls.add(row["url"])
    else:
        print("‚ö†Ô∏è PhishTank CSV not found. Please download it.")

# Load data initially
load_phishtank_data()

SUSPICIOUS_KEYWORDS = ["verify", "urgent", "account", "payment", "suspended", "click here", "password", "reset", "limited", "security alert"]

def extract_urls(text):
    """Find all URLs in the email body."""
    url_pattern = r"https?://[^\s<>\"']+"
    return re.findall(url_pattern, text)

def check_suspicious_content(subject, body):
    """Check for phishing indicators in email content and classify risk level."""
    phishing_score = 0

    if any(word in subject.lower() for word in SUSPICIOUS_KEYWORDS):
        phishing_score += 2
    if any(word in body.lower() for word in SUSPICIOUS_KEYWORDS):
        phishing_score += 2

    urls = extract_urls(body)
    for url in urls:
        if url in phishing_urls:
            phishing_score += 5

    return phishing_score, urls

def fetch_latest_email(mail):
    """Fetch and analyze the latest unread email."""
    try:
        mail.select("inbox")
        status, messages = mail.search(None, "UNSEEN")
        email_ids = messages[0].split()
        if not email_ids:
            return

        latest_email_id = email_ids[-1]
        status, msg_data = mail.fetch(latest_email_id, "(RFC822)")

        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding if encoding else "utf-8")

                sender = msg.get("From")
                sent_date = msg.get("Date")

                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        content_type = part.get_content_type()
                        if content_type == "text/plain":
                            body = part.get_payload(decode=True).decode(errors="ignore")
                else:
                    body = msg.get_payload(decode=True).decode(errors="ignore")

                phishing_score, urls = check_suspicious_content(subject, body)
                risk_level = "High Risk" if phishing_score >= 10 else "Medium Risk" if phishing_score >= 7 else "Low Risk" if phishing_score >= 4 else "Safe"

                print(f"\nüì© **New Email Received**")
                print(f"üìå **From:** {sender}")
                print(f"üìå **Sent Date:** {sent_date}")
                print(f"üìå **Subject:** {subject}")
                print(f"‚ö†Ô∏è **Risk Level:** {risk_level} (Score: {phishing_score})")

                if urls:
                    print(f"üîó **Extracted URLs:**")
                    for url in urls:
                        print(f"üåê {url}")

                # Forward email only if the phishing score is 10 or more
                if phishing_score >= 10:
                    forward_email(msg)

                # Mark email as read
                mail.store(latest_email_id, '+FLAGS', '\\Seen')
    except Exception as e:
        print(f"Error fetching email: {e}")

def forward_email(msg):
    """Forward an email via SMTP."""
    try:
        smtp = smtplib.SMTP(SMTP_SERVER, 587)
        smtp.starttls()
        smtp.login(EMAIL, PASSWORD)

        subject = "FWD: " + (msg["Subject"] if msg["Subject"] else "(No Subject)")

        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    body = part.get_payload(decode=True).decode(errors="ignore")
                    break
        else:
            body = msg.get_payload(decode=True).decode(errors="ignore")

        msg_forward = MIMEText(body)
        msg_forward["From"] = EMAIL
        msg_forward["To"] = FORWARD_TO
        msg_forward["Subject"] = subject

        smtp.sendmail(EMAIL, FORWARD_TO, msg_forward.as_string())
        smtp.quit()
        print("üì® Email forwarded successfully.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error forwarding email: {e}")

def listen_for_new_email():
    """Listen for new email using IMAP polling."""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)

    mail.login(EMAIL, PASSWORD)
    print("üîÑ Listening for new emails...")

    try:
        while True:
            mail.select("inbox")
            status, response = mail.search(None, "UNSEEN")  # Check for unread emails
            unread_email_ids = response[0].split()

            if unread_email_ids:
                fetch_latest_email(mail)

            time.sleep(5)  # Reduce server load; adjust as needed

    except KeyboardInterrupt:
        print("\nüõë Stopping email listener.")
    finally:
        mail.logout()

if __name__ == "__main__":
    listen_for_new_email()